name: 🚀 CI/CD Pipeline - API Consulta v2 (Sem Docker Hub)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: "3.11"
  IMAGE_NAME: poc-api-consulta-v2

jobs:
  # ===== JOB 1: CODE QUALITY & TESTING =====
  quality-check:
    name: 🔍 Quality Checks & Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio isort flake8

      - name: 📝 Import sorting check (isort)
        run: isort --check-only --diff src/ tests/

      - name: 🚨 Linting (Flake8)
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: 🧪 Run unit tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # ===== JOB 2: SECURITY SCAN =====
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔍 Security audit (Safety)
        run: |
          pip install safety
          safety check -r requirements.txt --ignore 70715 --ignore 70716

      - name: 🛡️ Security scan (Bandit)
        run: |
          pip install bandit
          bandit -r src/ -c .bandit -f json -o bandit-report.json

      - name: 📤 Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json

  # ===== JOB 3: BUILD DOCKER IMAGE (LOCAL ONLY) =====
  build-test:
    name: 🏗️ Test Docker Build
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔨 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 📦 Build Docker image (test only)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # ===== JOB 4: DEPLOY MESSAGE =====
  deploy-message:
    name: 📢 Deploy Instructions
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📢 Deploy instructions
        run: |
          echo "🎉 **BUILD REALIZADO COM SUCESSO!**"
          echo ""
          echo "📋 **PRÓXIMOS PASSOS PARA DEPLOY COMPLETO:**"
          echo ""
          echo "1. **Configure Docker Hub Secrets:**"
          echo "   - DOCKER_HUB_USERNAME"
          echo "   - DOCKER_HUB_PASSWORD (use access token)"
          echo ""
          echo "2. **Crie o repositório no Docker Hub:**"
          echo "   - Nome: poc-api-consulta-v2"
          echo ""
          echo "3. **Ative o workflow principal:**"
          echo "   - Renomeie python-app.yml para ativar push para Docker Hub"
          echo ""
          echo "4. **Configure VPS SSH Key:**"
          echo "   - VPS_SSH_PRIVATE_KEY"
          echo ""
          echo "🚀 **Após configurar os secrets, o deploy automático funcionará!**"
