name: 🚀 CI/CD Pipeline - API Consulta v2

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: "3.11"
  REGISTRY: docker.io
  IMAGE_NAME: poc-api-consulta-v2

jobs:
  # ===== JOB 1: CODE QUALITY & TESTING =====
  quality-check:
    name: 🔍 Quality Checks & Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio isort flake8

      - name: 📝 Import sorting check (isort)
        run: isort --check-only --diff src/ tests/

      - name: 🚨 Linting (Flake8)
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: 🧪 Run unit tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # ===== JOB 2: SECURITY SCAN =====
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔍 Security audit (pip-audit)
        run: |
          pip install pip-audit
          # Run pip-audit and ignore vulnerabilities without fixes
          pip-audit -r requirements.txt --ignore-vuln GHSA-wj6h-64fc-37mp

      - name: 🛡️ Security scan (Bandit)
        run: |
          pip install bandit
          bandit -r src/ -c .bandit -f json -o bandit-report.json

      - name: 📤 Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json

  # ===== JOB 3: BUILD & PUSH DOCKER IMAGE =====
  build-and-push:
    name: 🏗️ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Validate Docker configuration
        run: |
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Image Name: ${{ env.IMAGE_NAME }}"
          echo "Full image path: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

      - name: 🔨 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 📦 Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # ===== JOB 4: DEPLOY TO STAGING =====
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          # Aqui você adicionaria os comandos específicos para deploy
          # Por exemplo: kubectl, docker-compose, ou chamadas para API

  # ===== JOB 5: DEPLOY TO PRODUCTION =====
  deploy-production:
    name: 🌟 Deploy to Production VPS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Setup SSH connection
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

      - name: 📋 Add VPS to known hosts
        run: |
          ssh-keyscan -H 69.62.103.163 >> ~/.ssh/known_hosts

      - name: 🌟 Deploy to Production VPS
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          echo "🌟 Deploying to production VPS: 69.62.103.163"
          echo "Image: $IMAGE_TAG"
          
          # Create directory structure on VPS first
          echo "📁 Creating project structure on VPS..."
          ssh root@69.62.103.163 << 'SETUP_EOF'
            echo "Creating /opt/api-consulta-v2 structure..."
            mkdir -p /opt/api-consulta-v2/logs
            mkdir -p /opt/api-consulta-v2/storage
            mkdir -p /opt/api-consulta-v2/monitoring/grafana/dashboards
            mkdir -p /opt/api-consulta-v2/monitoring/grafana/datasources
            
            # Remove any existing prometheus.yml directory (corrupted state)
            if [ -d "/opt/api-consulta-v2/monitoring/prometheus.yml" ]; then
              echo "⚠️ Removing corrupted prometheus.yml directory..."
              rm -rf /opt/api-consulta-v2/monitoring/prometheus.yml
            fi
            
            # Set permissions
            chmod -R 755 /opt/api-consulta-v2
            
            echo "Directory structure created successfully:"
            ls -la /opt/api-consulta-v2/
            ls -la /opt/api-consulta-v2/monitoring/
          SETUP_EOF
          
          # Transfer configuration files first
          echo "📤 Transferring main configuration files..."
          scp docker-compose.vps.yml root@69.62.103.163:/opt/api-consulta-v2/
          scp Makefile root@69.62.103.163:/opt/api-consulta-v2/
          
          # Transfer monitoring files individually to debug
          echo "📤 Transferring monitoring configuration..."
          scp monitoring/prometheus.yml root@69.62.103.163:/opt/api-consulta-v2/monitoring/
          scp monitoring/grafana/datasources/prometheus.yml root@69.62.103.163:/opt/api-consulta-v2/monitoring/grafana/datasources/
          scp monitoring/grafana/dashboards/api-monitoring.json root@69.62.103.163:/opt/api-consulta-v2/monitoring/grafana/dashboards/
          
          # Connect to VPS and deploy using Make
          echo "🚀 Starting deployment..."
          ssh root@69.62.103.163 << EOF
            export DOCKER_HUB_USERNAME=$DOCKER_USERNAME
            export MONGO_URI="$MONGO_URI"
            export SECRET_KEY="$SECRET_KEY"
            
            echo "📁 Preparing deployment..."
            cd /opt/api-consulta-v2
            
            echo "🚀 Deploying using Make..."
            make docker-vps
            
            echo "✅ Deployment completed successfully!"
          EOF
