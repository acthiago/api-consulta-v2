networks:
  api_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  prometheus_data:
  grafana_data:
  redis_data:

services:
  # ===== API Principal =====
  api:
    image: ${DOCKER_HUB_USERNAME}/poc-api-consulta-v2:latest
    container_name: api-consulta-v2-production
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - MONGO_URI=${MONGO_URI}
      - DATABASE_NAME=api_consulta_v2_prod
      - SECRET_KEY=${SECRET_KEY}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
      - ENABLE_CORS=true
      - CORS_ORIGINS=["*"]
      - ENABLE_METRICS=true
      - HOST=0.0.0.0
      - PORT=8000
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_METRICS_PORT=8001
    networks:
      - api_network
      - monitoring_network
    volumes:
      - ./logs:/app/logs
      - ./storage:/app/storage
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===== Redis Cache =====
  redis:
    image: redis:7-alpine
    container_name: api-consulta-v2-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - api_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== Prometheus Monitoring =====
  prometheus:
    image: prom/prometheus:latest
    container_name: api-consulta-v2-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.route-prefix=/'
    networks:
      - monitoring_network
    depends_on:
      - api

  # ===== Grafana Dashboard =====
  grafana:
    image: grafana/grafana:latest
    container_name: api-consulta-v2-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring_network
    depends_on:
      - prometheus

  # ===== Nginx Reverse Proxy =====
  nginx:
    image: nginx:alpine
    container_name: api-consulta-v2-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.vps.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - grafana
    networks:
      - api_network
      - monitoring_network
